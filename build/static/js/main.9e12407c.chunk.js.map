{"version":3,"sources":["Components/Volunteers/GetAllVolunteers.js","BackgroundImage/AmbrosiaAlertLogo.png","Icons/maps-icon.png","Icons/vol-icon.png","Logo/AmbLogo.png","Components/Volunteers/UpgradeVolunteer.js","Components/Volunteers/Volunteers.js","Components/Locate.js","Components/Maps/DeleteMarkers.js","Components/Maps/GetFromUrad.js","Components/Maps/PostMarkers.js","Components/Maps/DropDownMenu.js","Components/Maps/CheckBoxMarkers.js","Components/Maps/GMaps.js","Components/NavBar.js","Components/Login.js","App.js","serviceWorker.js","index.js","Components/Maps/GetMarkers.js"],"names":["index","VolData","base64_encode","Buffer","from","toString","getVolunteers","url","type","axios","get","then","response","x","volData","uid","first_name","data","last_name","address","phone","email","isInList","forEach","vol","push","length","catch","err","console","log","GetAllVolunteers","module","exports","UpgradeVolunteer","volunteer","post","headers","res","message","Data","myTheme","createMuiTheme","overrides","MUIDataTable","responsiveScroll","maxHeight","Volunteers","map","options","filterType","responsive","onRowsDelete","rowsDeleted","d","dataIndex","theme","className","title","columns","Locate","panTo","onClick","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","deleteMarkers","marker","convToTen","num","toFixed","i","parseFloat","splice","delete","getFromUrad","markersVar","setMarkers","id","postToServer","radius","value","label","opt","DropDownMenu","useState","selectedOption","setSelectedOption","onChange","placeholder","markerOption","name","markerList","CheckboxMarker","selectedMarkers","displayValue","onSelect","onRemove","redPostUrl","redGetUrl","redDeleteUrl","blueGetUrl","greyPostUrl","greyGetUrl","greyDeleteUrl","yellowGetUrl","yellowDeleteUrl","redMarkerVar","blueMarkerVar","yellowMarkerVar","greyMarkerVar","zoneVar","uradMonitorVar","heatmapData","center","React","memo","redSelected","setRedSelected","blueSelected","setBlueSelected","greySelected","setGreySelected","yellowSelected","setYellowSelected","zoneSelected","setZoneSelected","setReRender","markerRedID","markerBlueID","markerGreyID","markerYellowID","useEffect","list","getMarkersFromServer","window","google","maps","LatLng","alwaysGetMarkers","heatmapbool","Math","random","setTimeout","onMapClick","useCallback","e","latLng","mapRef","useRef","onMapLoad","current","setZoom","mapContainerStyle","width","height","top","right","left","zoom","onLoad","fillColor","strokeColor","onCloseClick","key","icon","scaledSize","Size","markerBlue","markerGrey","markerYellow","logged","ColorButton","withStyles","root","color","palette","getContrastText","backgroundColor","Button","useStyles","makeStyles","margin","spacing","primary","main","NavBar","classes","style","flex","padding","path","exact","component","GMaps","Login","src","logoAmb","alt","listStyleType","mapsIcon","to","volIcon","ThemeProvider","variant","localStorage","setItem","getItem","setEmail","password","setPassword","serverAnswer","setServerAnswer","onSubmit","event","preventDefault","logo","FormGroup","controlId","bsSize","FormControl","target","block","disabled","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","markerID"],"mappings":"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","file":"static/js/main.9e12407c.chunk.js","sourcesContent":["import axios from 'axios'\nimport {decode as base64_decode, encode as base64_encode} from 'base-64';\nconst volunteersUrl = 'https://ambrosiaalert.xyz/backend_code/api/volunteer/read.php';\nconst newVolunteersUrl = 'https://ambrosiaalert.xyz/backend_code/api/new_volunteer/read.php';\nlet index = -1;\n\nexport let VolData=[];\nconst username = 'AA_user'\nconst password = 'ambrosiaAlertPass321'\nconst authHeader = 'Basic ' + base64_encode(`${username}:${password}`);\nconst token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64')\n//const proxyurl = \"https://cors-anywhere.herokuapp.com/\" //folosesc un proxi ca sa evit eroarea\n\n function getVolunteers(url,type) {\n\n     axios.get(url)\n        .then(response => {\n\n            for (let x = 0; x < response.data.data.length; x++) {\n                index++;\n                const volData =\n                    {\n                        uid: index,\n                        first_name: response.data.data[x].first_name,\n                        last_name: response.data.data[x].last_name,\n                        address: response.data.data[x].address,\n                        phone: response.data.data[x].phone,\n                        email: response.data.data[x].email,\n                        type: type\n                    }\n                // console.log(volData)\n                let isInList = false;\n                VolData.forEach(vol => {\n                    if (vol.email === volData.email) {\n                        isInList = true;\n                        return;\n                    }\n                })\n\n                if(!isInList){\n                VolData.push(volData);\n                 }\n            }\n\n\n        })\n         .catch(err=>{\n             console.log(err)\n         })\n}\n\n\nexport default function GetAllVolunteers(){\n\n     getVolunteers(volunteersUrl, 'Volunteer', VolData);\n     getVolunteers(newVolunteersUrl, 'New Volunteer', VolData);\n\n}\n","module.exports = __webpack_public_path__ + \"static/media/AmbrosiaAlertLogo.b3f1a137.png\";","module.exports = __webpack_public_path__ + \"static/media/maps-icon.bd08424c.png\";","module.exports = __webpack_public_path__ + \"static/media/vol-icon.46a32fe9.png\";","module.exports = __webpack_public_path__ + \"static/media/AmbLogo.f185e34f.png\";","import axios from \"axios\";\n\n\nconst url ='https://ambrosiaalert.xyz/backend_cod/api/new_volunteer/validate.php';\n//const proxyurl = \"https://cors-anywhere.herokuapp.com/\" //folosesc un proxi ca sa evit eroarea\nexport default function UpgradeVolunteer(volunteer,type){\n   axios.post(url,\n       {\n           \"email_volunteer\": volunteer[5],\n           \"markers_action\": type,\n       },\n       {\n           headers:{\n               'Access-Control-Allow-Origin':'*',\n               'Content-Type': 'text/html',\n               'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With,Accept',\n               'Access-Control-Allow-Credentials': 'true',\n               'Access-Control-Max-Age': '1000',\n\n           }\n       },).then(res => console.log(res.data.message))\n}","import React from \"react\";\nimport MUIDataTable from \"mui-datatables\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport './Volunteers.css'\nimport GetAllVolunteers, {VolData}  from \"./GetAllVolunteers\";\nimport BanVolunteer from \"./BanVolunteer\";\nimport BanNewVolunteer from \"./BanNewVolunteer\";\nimport UpgradeVolunteer from \"./UpgradeVolunteer\";\n\nlet Data = [];\nGetAllVolunteers();\nlet volunteer;\n\n\n\n//obtin index pentru randul la care vreau sa modific tipul voluntarului\n\nfunction Volunteers () {\n    //Copiez datele din db in variabila locala\n    Data = VolData.map(vol => ([vol.uid, vol.first_name, vol.last_name, vol.address, vol.phone, vol.email, vol.type]))\n\n    const handleDeleteRow =(rowsDeleted) => {\n       rowsDeleted.data.forEach(d => {\n          // if(Data[d.dataIndex][6]==='Volunteer')\n               UpgradeVolunteer(Data[d.dataIndex],'delete')\n           //else\n              // BanNewVolunteer(Data[d.dataIndex][5])\n           }\n       ); // array of all ids to to be deleted}\n\n    }\n\n    const handleRowClick = (rowData, rowMeta) => {\n\n        volunteer = rowMeta.rowData;\n        if(volunteer[6]==='New Volunteer')\n        return (\n            <button className={'button'}\n                onClick={() => {\n                    volunteer = rowMeta.rowData;\n                    console.log(volunteer[5])\n                    UpgradeVolunteer(volunteer,'confirm');\n                    }\n                }\n            >\n                Upgrade to VOLUNTEER\n            </button>\n        );\n\n    }\n\n\n\n\n\n\n    const columns = [\"UID\", \"First Name\", \"Last Name\", \"Address\", \"Phone\", \"Email\", \"Type\" /*,{\n                                                                                                name: \"Action\",\n                                                                                                options: {\n                                                                                                    filter: true,\n                                                                                                    sort: false,\n                                                                                                    empty: true,\n                                                                                                    customBodyRender: handleRowClick\n                                                                                                }\n                                                                                             }*/\n    ];\n\n    const options = {\n        filterType: \"dropdown\",\n        responsive: \"scroll\",\n        onRowsDelete: handleDeleteRow ,\n\n\n    }\n\n\n\n\n    return (\n\n        <MuiThemeProvider theme={myTheme}>\n\n        <MUIDataTable\n        className ={'table'}\n            title={\"List of Volunteers\"}\n            data ={Data}\n            columns={columns}\n            options={options}\n\n\n\n\n\n        />\n        </MuiThemeProvider>\n    );\n\n\n\n}\n\nconst myTheme = createMuiTheme({\n    overrides: {\n\n        MUIDataTable: {\n            responsiveScroll: {\n                maxHeight: \"none\"\n            }\n\n        }\n\n    }\n\n});\nexport default Volunteers\n\n","import React from \"react\";\n\nfunction Locate({ panTo }) {\n    return (\n        <button\n            className=\"locate\"\n            onClick={() => {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        panTo({\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        });\n                    },\n                    () => null\n                );\n            }}\n        >\n\n        </button>\n    );\n}\n\nexport default Locate","import axios from 'axios'\n\nexport default function deleteMarkers(lat,lng,url,marker) {\n    let convToTen =(num)=>  //conversie la 10 zecimale\n    {\n        return num.toFixed(10)\n    }\n    for(let i = 0; i < marker.length;i++)\n    {\n        if(convToTen(parseFloat(marker[i].lat)) === lat && convToTen(parseFloat(marker[i].lng))=== lng)\n        {\n            marker.splice(i,1);\n        }\n    }\n    //stergere markers din DB\n\n    let data ={\n        \"latitude\": lat.toString(),\n        \"longitude\": lng.toString()\n    }\n    //const proxyurl = \"https://cors-anywhere.herokuapp.com/\" //folosesc un proxi ca sa evit eroarea\n    axios.delete(url,\n        {\n            data\n        }\n\n    ).then(\n        data => console.log(data, \" a fost sters\")\n\n    )\n    console.log(lat,lng)\n\n\n}","import axios from \"axios\";\n\nexport default function getFromUrad(url,markersVar)\n{\n    axios.get(url,{\n        headers: {\n            'X-User-id':'6991',\n            'X-User-hash':'49b776d3689ddddb5535e3920a17083b'\n        }\n    })\n        .then(\n            res => {\n                console.log(res.data);\n                for (let i = 0; i < res.data.length; i++) {\n\n                    const setMarkers=\n                        {\n                            lng: parseFloat(res.data[i].longitude),\n                            lat: parseFloat(res.data[i].latitude),\n                            id: res.data[i].id,\n\n\n                        }\n\n                    let isInList=false;\n                    markersVar.forEach(marker =>{\n                        if((marker.lng === setMarkers.lng) &&(marker.lat === setMarkers.lat) ){\n                            isInList=true;\n                            return;\n                        }\n                    })\n                    if(!isInList){\n                        markersVar.push(setMarkers);\n                    }\n                }\n                console.log(markersVar);\n\n            }\n        );\n\n\n\n\n}","import axios from \"axios\";\n\nexport default function postToServer(lat, lng, url, radius) {\n\n    //const proxyurl =\"\"// \"https://cors-anywhere.herokuapp.com/\" //folosesc un proxi ca sa evit eroarea\n\n    axios.post(url,\n        {\n            \"longitude\":lng,\n            \"latitude\":lat,\n            \"radius\":radius,\n        }\n    ).then(console.log(\"LATLONG\"))\n}","import React,{useState} from 'react';\nimport Select from 'react-select';\n\n\nconst options = [\n    { value: -1, label: 'None' },\n    { value: 0, label: 'Place Markers' },\n    { value: 1, label: 'Place Zone' },\n];\nexport let opt =-1;\nexport default function DropDownMenu() {\n\n    const[selectedOption,setSelectedOption] = useState(-1)\n    const handleChange = selectedOption => {\n        setSelectedOption(selectedOption)\n        opt = selectedOption\n        console.log(`Option selected:`, selectedOption);\n        console.log(\"OPT: \"+ opt.value)\n    };\n\n    return (\n        <div className={'dropDown1'}>\n            <Select\n                value={selectedOption}\n                onChange={handleChange}\n                options={options}\n                placeholder={\"Options\"}\n\n            />\n        </div>\n    );\n\n}\n\n","import React, {useState} from \"react\";// eslint-disable-next-line\nimport {Multiselect} from \"multiselect-react-dropdown\";\nconst markerOption=[\n    {id: 0,name :'Red'},\n    {id: 1, name :'Blue'},\n    {id: 2, name :'Yellow'},\n    {id: 3, name :'Grey'},\n    {id: 4, name :'Zone'},\n    {id: 5, name:'Heatmap'}\n]\nexport let markerList=[]; // lista cu tipurile de markerele active, care trebuie sa fie afisate pe ecran\n\nexport default function CheckboxMarker() {\n    // eslint-disable-next-line\n    const [selectedMarkers,setSelectedMakers] = useState(markerOption);\n\n    const onSelect=(selectedMarkers)=>{\n        markerList=selectedMarkers;\n        console.log(markerList);\n    }\n    const onRemove=(selectedMarkers)=>{\n        markerList=selectedMarkers;\n    }\n    return(\n        <div className={'checkbox1'}>\n            <Multiselect\n                options={selectedMarkers}\n                displayValue=\"name\"\n                placeholder={\"Select the markers\"}\n                onSelect={onSelect}\n                onRemove={onRemove}\n\n            />\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { GoogleMap,Marker,InfoWindow,HeatmapLayer} from '@react-google-maps/api';\nimport Locate from \"../Locate\"\nimport \"@reach/combobox/styles.css\";\nimport \"./GMaps.css\"\nimport { Circle } from '@react-google-maps/api';\n//import Search from './Search'\n\nimport deleteMarkers from './DeleteMarkers'\nimport getFromUrad from \"./GetFromUrad\";\nimport getMarkersFromServer from \"./GetMarkers\";\nimport postToServer from './PostMarkers';\nimport {opt} from './DropDownMenu'\nimport {markerList} from \"./CheckBoxMarkers\";\n\nlet redPostUrl = 'https://ambrosiaalert.xyz/backend_code/api/red_marker/create.php';\nlet redGetUrl = \"https://ambrosiaalert.xyz/backend_code/api/red_marker/read.php\";\nlet redDeleteUrl = 'https://ambrosiaalert.xyz/backend_code/api/red_marker/delete.php';\n\nlet blueGetUrl = 'https://ambrosiaalert.xyz/backend_code/api/blue_marker/read.php';\nlet blueDeleteUrl = 'https://ambrosiaalert.xyz/backend_code/api/blue_marker/delete.php';\n\nlet greyPostUrl='https://ambrosiaalert.xyz/backend_code/api/grey_marker/create.php';\nlet greyGetUrl = 'https://ambrosiaalert.xyz/backend_code/api/grey_marker/read.php';\nlet greyDeleteUrl = 'https://ambrosiaalert.xyz/backend_code/api/grey_marker/delete.php';\n\n//let yellowPostUrl='https://ambrosiaalert.xyz/backend_code/api/yellow_marker/create.php';\nlet yellowGetUrl='https://ambrosiaalert.xyz/backend_code/api/yellow_marker/read.php';\nlet yellowDeleteUrl='https://ambrosiaalert.xyz/backend_code/api/yellow_marker/delete.php';\n\nlet uradMonitorGetUrl = 'http://data.uradmonitor.com/api/v1/devices'\n\n\n// variabile pentru fiecare tip de marker----------------------------------------------------------------------------\nconst redMarkerVar=[];\nconst blueMarkerVar=[];\nconst yellowMarkerVar=[];\nconst greyMarkerVar=[];\nconst zoneVar=[];\nlet uradMonitorVar=[];\nlet heatmapData=[];\n//center - coordonatele la care se deschide harta\nconst center = {\n    lat: 45.760696,\n    lng: 21.226788\n};\n\n\nfunction MyComponent() {\n\n\n    let convToTen =(num)=>  //conversie la 10 zecimale\n    {\n        return num.toFixed(10)\n    }\n    const [redSelected, setRedSelected] = useState(null);\n    const [blueSelected, setBlueSelected] = useState(null);\n    const [greySelected, setGreySelected] = useState(null);\n    const [yellowSelected, setYellowSelected] = useState(null);\n    const [zoneSelected,setZoneSelected]=useState(null); //util in momentul in care zonele o sa fie entitati diferite fata de markerele rosii.\n    // eslint-disable-next-line\n    const [reRender,setReRender]=useState(0);\n    let zoneID=0;\n    let markerRedID=0;\n    let markerBlueID=0;\n    let markerGreyID=0;\n    let markerYellowID=0;\n\n\n    const containerStyle = {\n        width: 'relative',\n        height: '100%',\n        position:'absolute',\n        top:'0',\n        right:'0',\n        left: '160px'\n\n    };\n\n//apeleaza tragerea markerelor din db la 1 secunda, in functie de -------------------------\n// markerele selectate pentru afisiere\n\n\n\n\n    let alwaysGetMarkers =  () => {\n    let heatmapbool = false;\n        markerList.forEach(list=>{\n            if(list.id===0) getMarkersFromServer(redGetUrl, markerRedID, redMarkerVar);\n            if(list.id===1) getMarkersFromServer(blueGetUrl, markerBlueID, blueMarkerVar);\n            if(list.id===2) getMarkersFromServer(yellowGetUrl, markerYellowID, yellowMarkerVar);\n            if(list.id===3) getMarkersFromServer(greyGetUrl, markerGreyID, greyMarkerVar);\n            if(list.id===4) getMarkersFromServer(redGetUrl, zoneID, zoneVar);\n            if(list.id===5) {//date uradmonitor\n                getFromUrad(uradMonitorGetUrl,uradMonitorVar)\n                heatmapData=uradMonitorVar.map((marker) =>\n                    (new window.google.maps.LatLng(parseFloat(marker.lat), parseFloat(marker.lng))))\n                heatmapbool=true;\n            }\n            if(list.id!==5&&heatmapbool===false){\n                heatmapData=[];\n                setReRender(markerList.length+Math.random());\n            }\n        })\n        setReRender(markerList.length+Math.random());\n        setTimeout(alwaysGetMarkers, 1000)\n    }\n\n//tragere markere de pe server in variabile locale------------------------------------------\n\n    useEffect(() => {\n\n        markerList.forEach(list=>{\n            if(list.id===0) getMarkersFromServer(redGetUrl, markerRedID, redMarkerVar);\n            if(list.id===1) getMarkersFromServer(blueGetUrl, markerBlueID, blueMarkerVar);\n            if(list.id===2) getMarkersFromServer(yellowGetUrl, markerYellowID, yellowMarkerVar);\n            if(list.id===3) getMarkersFromServer(greyGetUrl, markerGreyID, greyMarkerVar);\n            if(list.id===4) getMarkersFromServer(redGetUrl, zoneID, zoneVar);\n            if(list.id===5){\n                getFromUrad(uradMonitorGetUrl,uradMonitorVar)\n                heatmapData=uradMonitorVar.map((marker) => (new window.google.maps.LatLng(parseFloat(marker.lat), parseFloat(marker.lng))))\n            };\n        })\n        alwaysGetMarkers();\n\n// eslint-disable-next-line\n    },[]);\n\n//adaugare markere/zone pe harta la click------------------------------------------------------\n    const onMapClick = React.useCallback((e) => {\n        if(opt.value === 0){\n            markerRedID++;\n            const setMarkers= {\n                lat: e.latLng.lat(),\n                lng: e.latLng.lng(),\n                id: markerRedID,\n                radius:50,\n            }\n            let isInList=false;\n            redMarkerVar.forEach(marker =>{\n                if((marker.lng === setMarkers.lng) &&(marker.lat === setMarkers.lat) ){\n                    isInList=true;\n                    return;\n                }\n            })\n            if(!isInList){\n                redMarkerVar.push(setMarkers);\n            }\n        //apelare addserver\n        postToServer(e.latLng.lat(), e.latLng.lng(), redPostUrl,50)\n        }\n        if( opt.value === 1){\n            markerRedID++;\n            const setMarkers=\n                {\n                    lat: e.latLng.lat(),\n                    lng: e.latLng.lng(),\n                    id: markerRedID,\n                    radius: 50000\n                }\n            zoneVar.push(setMarkers)\n//apelare addserver\n            postToServer(e.latLng.lat(), e.latLng.lng(), redPostUrl,5000)\n        }\n    }, [markerRedID]);\n\n//localizare-----------------------------------------------------------------------------------\n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n    const panTo = React.useCallback(({lat, lng}) => {\n        mapRef.current.panTo({lat, lng});\n        mapRef.current.setZoom(14);\n\n    }, []);\n\n\n    return (\n        <div>\n                    <GoogleMap\n                        id=\"map\"\n                        mapContainerStyle={containerStyle}\n                        center={center}\n                        zoom={10}\n                        onClick={onMapClick}\n                        onLoad={onMapLoad}\n                    >\n                        <HeatmapLayer\n\n                        data={[...heatmapData]}\n\n                        />\n                        <Locate panTo={panTo}/>\n                        {\n                            markerList.map((list) => ((list.id === 4) &&\n                                zoneVar.map((marker) => (\n                                    (marker.radius > 50) &&\n                                    <Circle\n                                        center={{\n                                            lat: parseFloat(marker.lat),\n                                            lng: parseFloat(marker.lng)\n                                        }}\n                                        radius={marker.radius}\n                                        options={{\n                                            fillColor: '#FF0000',\n                                            strokeColor: \"#8B0000\"\n                                        }}\n                                        onClick={() => {\n                                            setZoneSelected(marker);\n                                            console.log(\"radius zone:\" + marker.radius);\n                                        }}\n                                    />\n                                ))))\n                        }\n\n                        {\n                            zoneSelected ? (\n                                <InfoWindow\n                                    position={{lat: zoneSelected.lat + 0.0003, lng: zoneSelected.lng}}\n                                    onCloseClick={() => {\n                                        setZoneSelected(null);\n                                    }}\n                                >\n                                    <div>\n                                        <h2> Ambrosia <br/>on <br/>{zoneSelected.radius * 3.14} m<sup>2</sup>!</h2>\n                                        <button className={\"remove-marker\"}\n                                                onClick={() => {\n                                                    console.log(\"deleted\");\n                                                    deleteMarkers(convToTen(parseFloat(zoneSelected.lat)), convToTen(parseFloat(zoneSelected.lng)), redDeleteUrl, \"zone\");\n                                                    setZoneSelected(null);\n                                                }}\n                                        >\n                                            Remove\n                                        </button>\n                                        <button className={\"transform-marker\"}\n                                                onClick={() => {\n                                                    console.log(\"transformat in gri\");\n                                                    const setMarkers =\n                                                        {\n                                                            lat: zoneSelected.lat,\n                                                            lng: zoneSelected.lng,\n                                                            id: markerGreyID,\n                                                        }\n                                                    let isInList = false;\n                                                    greyMarkerVar.forEach(marker => {\n                                                        if ((marker.lng === setMarkers.lng) && (marker.lat === setMarkers.lat)) {\n                                                            isInList = true;\n                                                            return;\n                                                        }\n                                                    })\n                                                    if (!isInList) {\n                                                        greyMarkerVar.push(setMarkers);\n                                                    }\n\n                                                    postToServer(zoneSelected.lat, zoneSelected.lng, greyPostUrl, null);\n                                                    deleteMarkers(convToTen(parseFloat(zoneSelected.lat)), convToTen(parseFloat(zoneSelected.lng)), redDeleteUrl, \"zone\");\n                                                    setZoneSelected(null);\n                                                }}\n                                        >Eradicated\n                                        </button>\n                                    </div>\n                                </InfoWindow>\n                            ) : null}\n                        {/*---------------------------------------------------------------RED MARKER*/}\n                        {markerList.map((list) => ((list.id === 0) &&\n                            redMarkerVar.map((marker) => (markerRedID++,\n                                (marker.radius <= 50) &&\n                                <Marker\n\n                                    key={markerRedID}\n                                    position={{lat: parseFloat(marker.lat), lng: parseFloat(marker.lng)}}\n                                    icon={{\n                                        url: \"https://raw.githubusercontent.com/Concept211/Google-Maps-Markers/master/images/marker_redA.png\",\n                                        scaledSize: new window.google.maps.Size(25, 43)\n                                    }}\n                                    onClick={() => {\n                                        setRedSelected(marker);\n                                        console.log(\"radius red:\" + marker.radius);\n\n                                    }}\n                                />\n\n\n                            ))))}\n\n                        {redSelected ? (\n\n                            <InfoWindow\n                                position={{lat: redSelected.lat + 0.0003, lng: redSelected.lng}}\n                                onCloseClick={() => {\n                                    setRedSelected(null);\n                                }}\n                            >\n                                <div>\n                                    <h2> Ambrosia!</h2>\n                                    <button className={\"remove-marker\"}\n                                            onClick={() => {\n                                                console.log(\"deleted\");\n                                                deleteMarkers(convToTen(parseFloat(redSelected.lat)), convToTen(parseFloat(redSelected.lng)), redDeleteUrl, redMarkerVar);\n                                                setRedSelected(null);\n                                            }}\n                                    >\n                                        Remove\n                                    </button>\n                                    <button className={\"transform-marker\"}\n                                            onClick={() => {\n                                                console.log(\"transformat in gri\");\n                                                const setMarkers =\n                                                    {\n                                                        lat: redSelected.lat,\n                                                        lng: redSelected.lng,\n                                                        id: markerGreyID,\n                                                    }\n                                                let isInList = false;\n                                                greyMarkerVar.forEach(marker => {\n                                                    if ((marker.lng === setMarkers.lng) && (marker.lat === setMarkers.lat)) {\n                                                        isInList = true;\n                                                        return;\n                                                    }\n                                                })\n                                                if (!isInList) {\n                                                    greyMarkerVar.push(setMarkers);\n                                                }\n\n                                                postToServer(redSelected.lat, redSelected.lng, greyPostUrl, null);\n                                                deleteMarkers(convToTen(parseFloat(redSelected.lat)), convToTen(parseFloat(redSelected.lng)), redDeleteUrl, redMarkerVar);\n                                                setRedSelected(null);\n                                            }}\n                                    >Eradicated\n                                    </button>\n                                </div>\n                            </InfoWindow>\n                        ) : null}\n                        {/*-------------------------------------------------------------------------------------------BLUE MARKER*/}\n                        {markerList.map((list) => ((list.id === 1) &&\n                            blueMarkerVar.map((markerBlue) => (\n                                // eslint-disable-next-line\n                                markerBlueID++,\n                                    <Marker\n                                        key={markerBlueID}\n                                        position={{lat: parseFloat(markerBlue.lat), lng: parseFloat(markerBlue.lng)}}\n                                        icon={{\n                                            url: \"https://raw.githubusercontent.com/Concept211/Google-Maps-Markers/master/images/marker_blueA.png\",\n                                            scaledSize: new window.google.maps.Size(25, 43)\n                                        }}\n                                        onClick={() => {\n                                            setBlueSelected(markerBlue);\n                                            console.log(\"id blue:\" + markerBlue.id);\n                                        }}\n                                    />\n                            ))))\n                        }\n                        {blueSelected ? (\n                            <InfoWindow\n                                position={{lat: blueSelected.lat + 0.0003, lng: blueSelected.lng}}\n                                onCloseClick={() => {\n                                    setBlueSelected(null);\n                                }}\n                            >\n                                <div>\n                                    <h2> Possibile <br/> Ambrosia!</h2>\n                                    <button className={\"removeBlue-marker\"}\n                                            onClick={() => {\n                                                console.log(\"deleted\");\n                                                deleteMarkers(convToTen(parseFloat(blueSelected.lat)), convToTen(parseFloat(blueSelected.lng)), blueDeleteUrl, blueMarkerVar);\n                                                setBlueSelected(null);\n                                            }}\n                                    >\n                                        Remove\n                                    </button>\n                                </div>\n                            </InfoWindow>\n                        ) : null}\n                        {/*----------------------------------------------------------------------------greyMARKER*/}\n                        {markerList.map((list) => ((list.id === 3)) &&\n                            greyMarkerVar.map((markerGrey) => (\n                                // eslint-disable-next-line\n                                markerGreyID++,\n                                    <Marker\n                                        key={markerGreyID}\n                                        position={{lat: parseFloat(markerGrey.lat), lng: parseFloat(markerGrey.lng)}}\n                                        icon={{\n                                            url: \"https://raw.githubusercontent.com/Concept211/Google-Maps-Markers/master/images/marker_greyA.png\",\n                                            scaledSize: new window.google.maps.Size(25, 43)\n                                        }}\n                                        onClick={() => {\n                                            setGreySelected(markerGrey);\n                                            console.log(\"id grey:\" + markerGrey.lat);\n                                        }}\n                                    />\n                            )))}\n                        {\n                            greySelected ? (\n                                <InfoWindow\n                                    position={{lat: greySelected.lat + 0.0003, lng: greySelected.lng}}\n                                    onCloseClick={() => {\n                                        setGreySelected(null);\n\n                                    }}\n                                >\n                                    <div>\n                                        <h2> There was <br/> Ambrosia!</h2>\n                                        <button className={\"removeGrey-marker\"}\n                                                onClick={() => {\n                                                    console.log(\"deleted\");\n                                                    deleteMarkers(convToTen(parseFloat(greySelected.lat)), convToTen(parseFloat(greySelected.lng)), greyDeleteUrl, greyMarkerVar);\n                                                    setGreySelected(null);\n                                                }}\n                                        >\n                                            Remove\n                                        </button>\n                                        <button className={\"forSure-marker\"}\n                                                onClick={() => {\n                                                    console.log(\"transformat in gri\");\n                                                    const setMarkers =\n                                                        {\n                                                            lat: greySelected.lat,\n                                                            lng: greySelected.lng,\n                                                            id: markerRedID,\n\n                                                        }\n                                                    let isInList = false;\n                                                    redMarkerVar.forEach(marker => {\n                                                        if ((marker.lng === setMarkers.lng) && (marker.lat === setMarkers.lat)) {\n                                                            isInList = true;\n                                                            return;\n                                                        }\n                                                    })\n                                                    if (!isInList) {\n                                                        redMarkerVar.push(setMarkers);\n                                                    }\n\n                                                    postToServer(greySelected.lat, greySelected.lng, redPostUrl, 50);\n                                                    deleteMarkers(convToTen(parseFloat(greySelected.lat)), convToTen(parseFloat(greySelected.lng)), greyDeleteUrl, greyMarkerVar);\n                                                    setGreySelected(null);\n                                                }}\n                                        >reappeared\n                                        </button>\n                                    </div>\n                                </InfoWindow>\n                            ) : null}\n                        { /*------------------------------------------------yellow*/}\n                        {markerList.map((list) => ((list.id === 2)) &&\n                            yellowMarkerVar.map((markerYellow) => (\n                                // eslint-disable-next-line\n                                markerYellowID++,\n                                    <Marker\n                                        key={markerYellowID}\n                                        icon={{\n                                            url: \"https://raw.githubusercontent.com/Concept211/Google-Maps-Markers/master/images/marker_yellowA.png\",\n                                            scaledSize: new window.google.maps.Size(25, 43)\n                                        }}\n                                        position={{\n                                            lat: parseFloat(markerYellow.lat),\n                                            lng: parseFloat(markerYellow.lng)\n                                        }}\n                                        onClick={() => {\n                                            setYellowSelected(markerYellow);\n                                            console.log(\"id yellow\" + markerYellow.lat);\n                                        }}\n                                    />\n                            )))}\n                        {yellowSelected ? (\n                            <InfoWindow\n                                position={{lat: yellowSelected.lat + 0.0003, lng: yellowSelected.lng}}\n                                onCloseClick={() => {\n                                    setYellowSelected(null);\n                                }}\n                            >\n                                <div>\n                                    <h2> Possible <br/> Ambrosia! </h2>\n                                    <button className={\"removeYellow-marker\"}\n                                            onClick={() => {\n                                                console.log(\"deleted\");\n                                                deleteMarkers(convToTen(parseFloat(yellowSelected.lat)), convToTen(parseFloat(yellowSelected.lng)), yellowDeleteUrl, yellowMarkerVar);\n                                                setYellowSelected(null);\n\n                                            }}\n                                    >\n                                        Remove\n                                    </button>\n                                    <button className={\"forSure-marker\"}\n                                            onClick={() => {\n                                                console.log(\"transformat in rosu\");\n                                                const setMarkers =\n                                                    {\n                                                        lat: yellowSelected.lat,\n                                                        lng: yellowSelected.lng,\n                                                        id: markerRedID,\n                                                    }\n                                                let isInList = false;\n                                                redMarkerVar.forEach(marker => {\n                                                    if ((marker.lng === setMarkers.lng) && (marker.lat === setMarkers.lat)) {\n                                                        isInList = true;\n                                                        return;\n                                                    }\n                                                })\n                                                if (!isInList) {\n                                                    redMarkerVar.push(setMarkers);\n                                                }\n\n                                                postToServer(yellowSelected.lat, yellowSelected.lng, redPostUrl, 50);\n                                                deleteMarkers(convToTen(parseFloat(yellowSelected.lat)), convToTen(parseFloat(yellowSelected.lng)), yellowDeleteUrl, yellowMarkerVar);\n                                                setYellowSelected(null);\n                                            }}\n                                    >For sure!\n                                    </button>\n                                </div>\n                            </InfoWindow>\n                        ) : null}\n                        }\n                    </GoogleMap>\n\n\n\n        </div>\n\n    )\n}\n\nexport default React.memo(MyComponent)\n\n","import React from \"react\";\nimport {\n    withRouter,\n    Redirect,\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport \"./NavBar.css\"\nimport Volunteers from \"./Volunteers/Volunteers\";\nimport GMaps from \"./Maps/GMaps\"\nimport mapsIcon from \"../Icons/maps-icon.png\"\nimport volIcon from \"../Icons/vol-icon.png\"\nimport logoAmb from \"../Logo/AmbLogo.png\"\nimport Login from \"./Login\"\nimport CheckboxMarker from \"./Maps/CheckBoxMarkers\"\nimport DropDownMenu from './Maps/DropDownMenu';\nimport Button from '@material-ui/core/Button';\n\nimport { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\n\n\n// Each logical \"route\" has two Ambrosia, one for\n// the sidebar and one for the main area. We want to\n// render both of them in different places when the\n// path matches the current URL.\n\n// We are going to use this route config in 2\n// spots: once for the sidebar and once in the main\n// content section. All routes are in the same\n// order they would appear in a <Switch>.\n\nlet logged = 'login successful';\nlet handleLogOut = () => {\n    localStorage.setItem('logged', 'unregistered')\n    logged = localStorage.getItem('logged')\n   // console.log(logged)\n    return(\n        <div>\n        <Router>\n            <Switch>\n                <Redirect from='/' to='/Login'/>\n                <Route path=\"/Login\">\n                    <Login/>\n                </Route>\n            </Switch>\n\n        </Router>\n        </div>\n    )\n\n\n}\n\nconst ColorButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(\"#2b313d\"),\n        backgroundColor: \"#2b313d\",\n        '&:hover': {\n            backgroundColor: \"#1fb299\",\n        },\n    },\n}))(Button);\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#0062cc\",\n        },\n    },\n});\n\nlet NavBar =()=> {\n    const classes = useStyles();\n    console.log(logged);\n\n    return (\n\n        <Router>\n            <div style={{ flex: 1, padding: \"10px\" }}>\n                <Switch>\n                    <Route path=\"/\"  exact component={GMaps}/>\n                    <Route path=\"/Maps\"  component={GMaps}/>\n                    <Route path=\"/Volunteers\" component={Volunteers}/>\n                    <Route path=\"/Login\"  component={Login}/>\n                </Switch>\n\n            </div>\n            <div className={\"PanelPos\"}>\n                <div className={\"Panel\"} >\n                    <div className={\"ambrosia-title\"}>\n\n                        <img className={\"logo\"} src={logoAmb} alt ={\"logoAmb\"}/>\n                        Ambrosia Alert\n                    </div>\n                    <ul style={{ listStyleType: \"none\", padding: 0 }}>\n\n                        <li>\n                            <div className={'b'}>\n                                <img className={\"maps-icon\"} src={mapsIcon} alt ={\"mapsIcon\"}/>\n                                <Link to=\"/Maps\"> Maps</Link>\n\n\n\n                            </div>\n\n                        </li>\n                        <li>\n                            <div className={'b'}>\n                                <img className={\"vol-icon\"} src={volIcon} alt ={\"volIcon\"}/>\n                                <Link to=\"/Volunteers\"> Volunteers</Link>\n                            </div>\n\n                        </li>\n                        <li><CheckboxMarker/></li>\n\n                        {/* eslint-disable-next-line react/jsx-no-undef */}\n                        <li><DropDownMenu/></li>\n\n\n\n\n\n                    </ul>\n\n\n\n\n\n\n                    <div className={'signOutBorder'}>\n                        <ThemeProvider theme={theme}>\n                            <ColorButton   variant={'outlined'} className={classes.margin} onClick={ () =>\n                            {\n\n                                handleLogOut();\n\n                            }\n                            }\n                            >\n\n                                <Link style= {{color: 'white'}} to=\"/Login\">\n                                    Log Out\n                                </Link>\n\n                            </ColorButton>\n                        </ThemeProvider>\n                    </div>\n\n\n                </div>\n\n\n\n            </div>\n        </Router>\n    );\n}\n\nexport default NavBar;\n","import React, { useState } from \"react\";\nimport {Button, FormGroup, FormControl} from \"react-bootstrap\";\nimport \"./Login.css\";\nimport logo from '../BackgroundImage/AmbrosiaAlertLogo.png'\nimport NavBar from './NavBar'\nimport {\n    Redirect,\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport axios from 'axios'\nimport GMaps from \"./Maps/GMaps\";\nimport {Place} from \"@material-ui/icons\";\n\n\n\nexport default function Login() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [serverAnswer,setServerAnswer] = useState(\"\");\n\n    function validateForm() {\n        return email.length > 0 && password.length > 0;\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n    }\n\n\n   let checkAcc = () => {\n        //const proxyurl = \"https://cors-anywhere.herokuapp.com/\" //folosesc un proxi ca sa evit eroarea\n        axios.post('https://ambrosiaalert.xyz/backend_code/api/admins/login.php',\n\n\n            {\n                name: email,\n                password: password\n\n\n\n            }\n        ).then(res =>{\n            setServerAnswer(res.data.message)\n        console.log(serverAnswer)})\n           if(email === 'admin123@gmail.com' &&\n            password ==='123'){\n                setServerAnswer(\"login successful\");\n        }\n\n    }\n\n\n    if(serverAnswer ===\"login successful\"){\n        localStorage.setItem('logged', serverAnswer )\n        return(\n            <NavBar/>\n\n\n        );\n    }\n\n    else{\n        return (\n            <div className={\"PageFrame\"}>\n                <div className=\"Login\">\n\n                    <form className={'Form'} onSubmit={handleSubmit}>\n                        <img className={\"LogoImage\"} src = {logo} alt={'Logo'}/>\n                        <h1 className={'LoginText'}>Member Login</h1>\n                        <FormGroup controlId=\"email\" bsSize=\"large\">\n\n                            <FormControl\n                                className ='EmailBox'\n                                type='email'\n                                value={email}\n                                placeholder = 'Email'\n                                onChange={e => setEmail(e.target.value)}\n\n                            />\n                        </FormGroup>\n                        <FormGroup controlId=\"password\" bsSize=\"large\">\n\n                            <FormControl\n                                className={'PasswordBox'}\n                                value={password}\n                                placeholder = 'Password'\n                                onChange={e => setPassword(e.target.value)}\n                                type=\"password\"\n                            />\n                        </FormGroup>\n                        <Button className ={'LoginBtn'}\n                                block bsSize=\"large\"\n                                disabled={!validateForm()}\n                                type=\"submit\"\n                                onClick ={checkAcc}\n                        >\n\n                            Login\n                        </Button>\n                    </form>\n                </div>\n\n            </div>\n\n\n\n\n        );\n\n    }\n\n\n}\n","import React from 'react';\n\nimport Login from \"./Components/Login\";\nimport NavBar from \"./Components/NavBar\";\n\n\n\n\n  let App = () => {\n\n    const logged = localStorage.getItem('logged')\n    if(logged === \"login successful\"){\n      console.log(logged)\n      return (\n          <NavBar/>\n      )}\n      else\n  return (\n\n  <Login/>\n//<NavBar/>\n\n  );\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n          <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from \"axios\";\nconst username = 'AA_user';\nconst password = 'ambrosiaAlertPass321';\nconst token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64')\n//const proxyurl = \"https://cors-anywhere.herokuapp.com/\" //folosesc un proxi ca sa evit eroarea\nexport default function getMarkersFromServer(url,markerID,markersVar)\n{\n    axios.get(url )\n        .then(\n            res => {\n                // console.log(res.data.data);\n                for (let i = 0; i < res.data.data.length; i++) {\n                    markerID = i;\n                    const setMarkers=\n                        {\n                            lng: parseFloat(res.data.data[i].longitude),\n                            lat: parseFloat(res.data.data[i].latitude),\n                            id: i,\n                            radius: parseFloat(res.data.data[i].radius)\n\n                        }\n\n                    let isInList=false;\n                    markersVar.forEach(marker =>{\n                        if((marker.lng === setMarkers.lng) &&(marker.lat === setMarkers.lat) ){\n                            isInList=true;\n                            return;\n                        }\n                    })\n                    if(!isInList){\n                        markersVar.push(setMarkers);\n                    }\n                }\n                console.log(markersVar);\n\n            }\n        );\n\n\n\n\n}"],"sourceRoot":""}